{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import { ActionPanel, clearSearchBar, CopyToClipboardAction, Icon, List, preferences, showHUD } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ProcessList() {\n  const [state, setState] = useState<Process[]>([]);\n  const [query, setQuery] = useState<string | undefined>(undefined);\n  const shouldIncludePaths = (preferences.shouldSearchInPaths?.value as boolean) ?? false;\n  const shouldIncludePid = (preferences.shouldSearchInPid?.value as boolean) ?? false;\n  const shouldPrioritizeAppsWhenFiltering = (preferences.shouldPrioritizeAppsWhenFiltering?.value as boolean) ?? false;\n  const shouldShowPID = (preferences.shouldShowPID?.value as boolean) ?? false;\n  const shouldShowPath = (preferences.shouldShowPath?.value as boolean) ?? false;\n\n  const fetchProcesses = () => {\n    exec(`ps -eo pid,pcpu,comm | sort -nrk 2,3`, (err, stdout) => {\n      if (err != null) {\n        return;\n      }\n\n      const processes = stdout\n        .split(\"\\n\")\n        .map((line) => {\n          const [, id, cpu, path] = line.match(/(\\d+)\\s+(\\d+[.|,]\\d+)\\s+(.*)/) ?? [\"\", \"\", \"\", \"\"];\n          const name = path.match(/[^/]*[^/]*$/i)?.[0] ?? \"\";\n          const isPrefPane = path.includes(\".prefPane\");\n          const isApp = path.includes(\".app\");\n\n          return {\n            id,\n            cpu,\n            path,\n            name,\n            type: isPrefPane ? \"prefPane\" : isApp ? \"app\" : \"binary\",\n          } as Process;\n        })\n        .filter((process) => process.name !== \"\");\n\n      setState(processes);\n    });\n  };\n\n  useEffect(() => {\n    fetchProcesses();\n  }, []);\n\n  const fileIcon = (process: Process) => {\n    if (process.type === \"prefPane\") {\n      return { fileIcon: process.path?.replace(/(.+\\.prefPane)(.+)/, \"$1\") ?? \"\" };\n    }\n\n    if (process.type === \"app\") {\n      return { fileIcon: process.path?.replace(/(.+\\.app)(.+)/, \"$1\") ?? \"\" };\n    }\n\n    return \"/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ExecutableBinaryIcon.icns\";\n  };\n\n  const killProcess = (process: Process) => {\n    exec(`kill -9 ${process.id}`);\n    setState(state.filter((p) => p.id !== process.id));\n    clearSearchBar({ forceScrollToTop: true });\n    showHUD(`\u2705 Killed ${process.name === \"-\" ? `process ${process.id}` : process.name}`);\n  };\n\n  const copyToClipboardAction = (process: Process) => {\n    return process.path == null ? null : <CopyToClipboardAction title=\"Copy Path\" content={process.path} />;\n  };\n\n  const subtitleString = (process: Process) => {\n    let subtitle = undefined;\n\n    if (shouldShowPID) {\n      subtitle = process.id;\n    }\n\n    if (shouldShowPath) {\n      subtitle = subtitle ? `${subtitle} - ${process.path}` : process.path;\n    }\n\n    return subtitle;\n  };\n\n  return (\n    <List\n      isLoading={state.length === 0}\n      searchBarPlaceholder=\"Filter by name...\"\n      onSearchTextChange={(query) => setQuery(query)}\n    >\n      {state\n        .filter((process) => {\n          if (query == null) {\n            return true;\n          }\n\n          const nameMatches = process.name.toLowerCase().includes(query.toLowerCase());\n          const pathMatches =\n            process.path?.toLowerCase().match(new RegExp(`.+${query}.*\\\\.[app|framework|prefpane]`, \"ig\")) != null;\n          const pidMatches = process.id.includes(query);\n\n          return nameMatches || (shouldIncludePaths && pathMatches) || (shouldIncludePid && pidMatches);\n        })\n        .sort((a, b) => {\n          // If this flag is true, we bring apps to the top, but only if we have a query.\n          if (query != null && shouldPrioritizeAppsWhenFiltering) {\n            if (a.type === \"app\" && b.type !== \"app\") {\n              return -1;\n            } else if (a.type !== \"app\" && b.type === \"app\") {\n              return 1;\n            }\n          }\n\n          // Otherwise, we leave the order as is.\n          return 0;\n        })\n        .map((process, index) => {\n          const icon = fileIcon(process);\n          return (\n            <List.Item\n              key={index}\n              title={process.name}\n              subtitle={subtitleString(process)}\n              icon={icon}\n              accessoryTitle={`${process.cpu}%`}\n              actions={\n                <ActionPanel>\n                  <ActionPanel.Item title=\"Kill\" icon={Icon.XmarkCircle} onAction={() => killProcess(process)} />\n                  {copyToClipboardAction(process)}\n                  <ActionPanel.Item\n                    title=\"Reload\"\n                    icon={Icon.ArrowClockwise}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                    onAction={() => fetchProcesses()}\n                  />\n                </ActionPanel>\n              }\n            />\n          );\n        })}\n    </List>\n  );\n}\n\ntype Process = {\n  id: string;\n  cpu: string;\n  type: \"prefPane\" | \"app\" | \"binary\";\n  path: string | undefined;\n  name: string;\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "ProcessList", "__toCommonJS", "import_api", "import_child_process", "import_react", "import_jsx_runtime", "state", "setState", "query", "setQuery", "shouldIncludePaths", "shouldIncludePid", "shouldPrioritizeAppsWhenFiltering", "shouldShowPID", "shouldShowPath", "fetchProcesses", "err", "stdout", "processes", "line", "id", "cpu", "path", "name", "isPrefPane", "isApp", "process", "fileIcon", "killProcess", "p", "copyToClipboardAction", "subtitleString", "subtitle", "nameMatches", "pathMatches", "pidMatches", "a", "b", "index", "icon"]
}
