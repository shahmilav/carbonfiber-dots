{"id":"069335b9-e124-4d5f-8ffe-869b7d9fa49f","zed":"context","version":"0.4.0","text":"\n\n```svelte todos/src/routes/+page.svelte\n<script lang=\"ts\">\n\timport { resetMode, setMode } from 'mode-watcher';\n\timport * as DropdownMenu from '$lib/components/ui/dropdown-menu';\n\timport { Input } from '$lib/components/ui/input';\n\timport { Button } from '$lib/components/ui/button';\n\timport { Card } from '$lib/components/ui/card';\n\timport { Trash, Moon, Sun, Pencil, Eraser } from 'lucide-svelte';\n\timport TodoItem from '$lib/components/blocks/TodoItem.svelte';\n\n\timport { onMount } from 'svelte';\n\n\tinterface Todo {\n\t\tid: string;\n\t\ttext: string;\n\t\tx: number;\n\t\ty: number;\n\t\tzIndex: number;\n\t\tediting: boolean;\n\t}\n\n\tinterface DrawingPoint {\n\t\tx: number;\n\t\ty: number;\n\t\tdragging: boolean;\n\t\tcolor: string;\n\t\twidth: number;\n\t}\n\n\tinterface DrawingPath {\n\t\tpoints: DrawingPoint[];\n\t\ttool: 'pencil' | 'eraser';\n\t}\n\n\tlet todoInput = '';\n\tlet editingId: string | null = null;\n\tlet activeElement: Todo | null = null;\n\tlet initialX: number | null = null;\n\tlet initialY: number | null = null;\n\tlet offsetX: number | null = null;\n\tlet offsetY: number | null = null;\n\tlet todos: Todo[] = [];\n\n\t// Drawing related variables\n\tlet canvas: HTMLCanvasElement;\n\tlet ctx: CanvasRenderingContext2D;\n\tlet isDrawing = false;\n\tlet paths: DrawingPath[] = [];\n\tlet currentPath: DrawingPath | null = null;\n\tlet tool: 'pencil' | 'eraser' = 'pencil';\n\tlet drawingMode = false;\n\tlet strokeColor = '#000000';\n\tlet strokeWidth = 2;\n\t// Predefined colors for color picker\n\tconst predefinedColors = [\n\t\t'#000000', // Black\n\t\t'#FF0000', // Red\n\t\t'#00FF00', // Green\n\t\t'#0000FF', // Blue\n\t\t'#FFFF00', // Yellow\n\t\t'#FF00FF', // Magenta\n\t\t'#00FFFF', // Cyan\n\t\t'#FFA500', // Orange\n\t\t'#800080' // Purple\n\t];\n\n\tonMount(() => {\n\t\t// Load todos\n\t\tconst storedTodos = localStorage.getItem('todos');\n\t\tif (storedTodos) {\n\t\t\ttodos = JSON.parse(storedTodos);\n\t\t}\n\n\t\t// Initialize canvas\n\t\tctx = canvas.getContext('2d')!;\n\t\tcanvas.width = window.innerWidth;\n\t\tcanvas.height = window.innerHeight;\n\n\t\t// Load drawings\n\t\tconst storedPaths = localStorage.getItem('drawings');\n\t\tif (storedPaths) {\n\t\t\tpaths = JSON.parse(storedPaths);\n\t\t\tredrawCanvas();\n\t\t}\n\n\t\t// Handle window resize\n\t\twindow.addEventListener('resize', () => {\n\t\t\tconst imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\t\t\tcanvas.width = window.innerWidth;\n\t\t\tcanvas.height = window.innerHeight;\n\t\t\tctx.putImageData(imageData, 0, 0);\n\t\t\tredrawCanvas();\n\t\t});\n\n\t\t// Add mutation observer to detect theme changes\n\t\tconst observer = new MutationObserver((mutations) => {\n\t\t\tmutations.forEach((mutation) => {\n\t\t\t\tif (\n\t\t\t\t\tmutation.type === 'attributes' &&\n\t\t\t\t\tmutation.attributeName === 'class' &&\n\t\t\t\t\tmutation.target === document.documentElement\n\t\t\t\t) {\n\t\t\t\t\tredrawCanvas();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tobserver.observe(document.documentElement, { attributes: true });\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t};\n\t});\n\n\tfunction clearTodos() {\n\t\ttodos = [];\n\t\tsaveTodos();\n\t}\n\n\tfunction clearDrawings() {\n\t\tpaths = [];\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tsaveDrawings();\n\t}\n\n\tfunction saveTodos() {\n\t\tif (typeof localStorage !== 'undefined') {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\n\t\t}\n\t}\n\n\tfunction saveDrawings() {\n\t\tif (typeof localStorage !== 'undefined') {\n\t\t\tlocalStorage.setItem('drawings', JSON.stringify(paths));\n\t\t}\n\t}\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\tconst todo: Todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todoInput.trim(),\n\t\t\tx: randomX,\n\t\t\ty: randomY,\n\t\t\tzIndex: 10,\n\t\t\tediting: false\n\t\t};\n\n\t\ttodos = [...todos, todo];\n\t\tsaveTodos();\n\t\ttodoInput = '';\n\t}\n\n\tfunction deleteTodo(id: string) {\n\t\ttodos = todos.filter((todo) => todo.id !== id);\n\t\tsaveTodos();\n\t}\n\n\tfunction startEditing(id: string) {\n\t\teditingId = id;\n\t}\n\n\tfunction updateTodo(id: string, newText: string) {\n\t\ttodos = todos.map((todo) => (todo.id === id ? { ...todo, text: newText } : todo));\n\t\tsaveTodos();\n\t}\n\n\tfunction duplicate(id: string) {\n\t\tconst todo = todos.find((todo) => todo.id === id);\n\t\tif (!todo) return;\n\n\t\tconst newTodo: Todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todo.text,\n\t\t\tx: todo.x + 50,\n\t\t\ty: todo.y + 50,\n\t\t\tzIndex: todo.zIndex + 1,\n\t\t\tediting: false\n\t\t};\n\n\t\ttodos = [...todos, newTodo];\n\t\tsaveTodos();\n\t}\n\n\tfunction finishEditing() {\n\t\teditingId = null;\n\t}\n\n\tfunction dragStart(e: MouseEvent, todo: Todo) {\n\t\t// Allow dragging even in drawing mode\n\t\tif (editingId === todo.id || (e.target as HTMLElement).closest('.edit-area')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t(e.target as HTMLElement).tagName === 'BUTTON' ||\n\t\t\t(e.target as HTMLElement).closest('button')\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tactiveElement = todo;\n\n\t\ttodos = todos.map((t) => ({\n\t\t\t...t,\n\t\t\tzIndex: t.id === todo.id ? 100 : 10\n\t\t}));\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\tconst element = document.getElementById(todo.id) as HTMLElement;\n\t\tif (element) {\n\t\t\toffsetX = element.offsetLeft;\n\t\t\toffsetY = element.offsetTop;\n\t\t}\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e: MouseEvent) {\n\t\tif (\n\t\t\tactiveElement &&\n\t\t\tinitialX !== null &&\n\t\t\tinitialY !== null &&\n\t\t\toffsetX !== null &&\n\t\t\toffsetY !== null\n\t\t) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\tconst newX = offsetX + currentX;\n\t\t\tconst newY = offsetY + currentY;\n\n\t\t\ttodos = todos.map((todo) => {\n\t\t\t\tif (todo.id === activeElement?.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tx: newX,\n\t\t\t\t\t\ty: newY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tif (activeElement) {\n\t\t\tsaveTodos();\n\t\t}\n\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(event: KeyboardEvent) {\n\t\tif (event.key === 'Enter' && !event.shiftKey && !editingId) {\n\t\t\taddTodo();\n\t\t}\n\n\t\tif (event.key === 'Escape' && editingId) {\n\t\t\tfinishEditing();\n\t\t}\n\n\t\t// Toggle drawing mode with 'd' key, but only when not focusing on an input element\n\t\tif (event.key === 'd' && !editingId) {\n\t\t\t// Check if the currently focused element is an input\n\t\t\tconst activeElement = document.activeElement;\n\t\t\tconst isInput =\n\t\t\t\tactiveElement?.tagName === 'INPUT' ||\n\t\t\t\tactiveElement?.tagName === 'TEXTAREA' ||\n\t\t\t\tactiveElement?.isContentEditable;\n\n\t\t\t// Only toggle drawing mode if we're not typing in an input\n\t\t\tif (!isInput) {\n\t\t\t\tdrawingMode = !drawingMode;\n\t\t\t}\n\t\t}\n\n\t\t// Set tool to pencil with 'p' key\n\t\tif (event.key === 'p' && drawingMode) {\n\t\t\ttool = 'pencil';\n\t\t}\n\n\t\t// Set tool to eraser with 'e' key\n\t\tif (event.key === 'e' && drawingMode) {\n\t\t\ttool = 'eraser';\n\t\t}\n\t}\n\n\t// Drawing functions\n\tfunction startDrawing(e: MouseEvent) {\n\t\tif (!drawingMode) return;\n\n\t\t// Check if we clicked on a todo item\n\t\tconst clickedOnTodo = (e.target as HTMLElement).closest('.todo-item') !== null;\n\t\tif (clickedOnTodo) return;\n\n\t\tisDrawing = true;\n\t\tconst rect = canvas.getBoundingClientRect();\n\t\tconst x = e.clientX - rect.left;\n\t\tconst y = e.clientY - rect.top;\n\n\t\tcurrentPath = {\n\t\t\tpoints: [\n\t\t\t\t{\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\tdragging: false,\n\t\t\t\t\tcolor: tool === 'eraser' ? '#FFFFFF' : strokeColor,\n\t\t\t\t\twidth: strokeWidth\n\t\t\t\t}\n\t\t\t],\n\t\t\ttool\n\t\t};\n\n\t\tdraw(x, y, false);\n\t}\n\n\tfunction draw(x: number, y: number, dragging: boolean) {\n\t\tif (!isDrawing || !currentPath) return;\n\n\t\tcurrentPath.points.push({\n\t\t\tx,\n\t\t\ty,\n\t\t\tdragging,\n\t\t\tcolor: tool === 'eraser' ? '#FFFFFF' : strokeColor,\n\t\t\twidth: strokeWidth\n\t\t});\n\n\t\t// Draw the current stroke\n\t\tconst points = currentPath.points;\n\t\tconst lastPoint = points[points.length - 2];\n\t\tconst currentPoint = points[points.length - 1];\n\n\t\tif (tool === 'eraser') {\n\t\t\tctx.globalCompositeOperation = 'destination-out';\n\t\t\tctx.strokeStyle = 'rgba(0,0,0,1)';\n\t\t} else {\n\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\tctx.strokeStyle = getThemeAwareColor(currentPoint.color);\n\t\t}\n\n\t\tctx.lineWidth = currentPoint.width;\n\t\tctx.lineCap = 'round';\n\t\tctx.lineJoin = 'round';\n\n\t\tif (dragging) {\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(lastPoint.x, lastPoint.y);\n\t\t\tctx.lineTo(currentPoint.x, currentPoint.y);\n\t\t\tctx.stroke();\n\t\t} else {\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(currentPoint.x, currentPoint.y, currentPoint.width / 2, 0, Math.PI * 2);\n\t\t\tctx.fill();\n\t\t}\n\t}\n\n\tfunction continueDrawing(e: MouseEvent) {\n\t\tif (!isDrawing || !drawingMode) return;\n\n\t\t// Check if we're hovering over a todo item\n\t\tconst hoveringOverTodo = (e.target as HTMLElement).closest('.todo-item') !== null;\n\t\tif (hoveringOverTodo) {\n\t\t\t// Stop drawing when over a todo item\n\t\t\tstopDrawing();\n\t\t\treturn;\n\t\t}\n\n\t\tconst rect = canvas.getBoundingClientRect();\n\t\tconst x = e.clientX - rect.left;\n\t\tconst y = e.clientY - rect.top;\n\n\t\tdraw(x, y, true);\n\t}\n\n\tfunction stopDrawing() {\n\t\tif (!isDrawing) return;\n\n\t\tisDrawing = false;\n\t\tif (currentPath) {\n\t\t\tpaths.push(currentPath);\n\t\t\tcurrentPath = null;\n\t\t\tsaveDrawings();\n\t\t}\n\t}\n\n\tfunction redrawCanvas() {\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\tfor (const path of paths) {\n\t\t\tconst points = path.points;\n\t\t\tif (points.length < 2) continue;\n\n\t\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\t\tconst point = points[i];\n\t\t\t\tconst prevPoint = points[i - 1];\n\n\t\t\t\tif (path.tool === 'eraser') {\n\t\t\t\t\tctx.globalCompositeOperation = 'destination-out';\n\t\t\t\t\tctx.strokeStyle = 'rgba(0,0,0,1)';\n\t\t\t\t} else {\n\t\t\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\t\t\tctx.strokeStyle = getThemeAwareColor(point.color);\n\t\t\t\t}\n\n\t\t\t\tctx.lineWidth = point.width;\n\t\t\t\tctx.lineCap = 'round';\n\t\t\t\tctx.lineJoin = 'round';\n\n\t\t\t\tif (point.dragging) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(prevPoint.x, prevPoint.y);\n\t\t\t\t\tctx.lineTo(point.x, point.y);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t} else {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(point.x, point.y, point.width / 2, 0, Math.PI * 2);\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reset the composite operation to default\n\t\tctx.globalCompositeOperation = 'source-over';\n\t}\n\n\tfunction toggleDrawingMode() {\n\t\tdrawingMode = !drawingMode;\n\t}\n\n\tfunction setDrawingTool(newTool: 'pencil' | 'eraser') {\n\t\ttool = newTool;\n\t}\n\tfunction getThemeAwareColor(color: string): string {\n\t\t// Check if we're in dark mode\n\t\tconst isDarkMode = document.documentElement.classList.contains('dark');\n\n\t\t// Convert black to white in dark mode and vice versa\n\t\tif (color === '#000000' && isDarkMode) {\n\t\t\treturn '#FFFFFF';\n\t\t} else if (color === '#FFFFFF' && !isDarkMode) {\n\t\t\treturn '#000000';\n\t\t}\n\n\t\t// Return original color for all other colors\n\t\treturn color;\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<canvas\n\tbind:this={canvas}\n\tclass=\"absolute inset-0 z-0 touch-none\"\n\ton:mousedown={startDrawing}\n\ton:mousemove={continueDrawing}\n\ton:mouseup={stopDrawing}\n\ton:mouseleave={stopDrawing}\n></canvas>\n\n<nav>\n\t<DropdownMenu.Root>\n\t\t<DropdownMenu.Trigger asChild let:builder>\n\t\t\t<Button builders={[builder]} variant=\"outline\" class=\"fixed right-4 top-4\" size=\"icon\">\n\t\t\t\t<Sun\n\t\t\t\t\tclass=\"absolute h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\"\n\t\t\t\t/>\n\t\t\t\t<Moon\n\t\t\t\t\tclass=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\"\n\t\t\t\t/>\n\t\t\t\t<span class=\"sr-only\">Toggle theme</span>\n\t\t\t</Button>\n\t\t</DropdownMenu.Trigger>\n\t\t<DropdownMenu.Content align=\"end\">\n\t\t\t<DropdownMenu.Item on:click={() => setMode('light')}>Light</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item on:click={() => setMode('dark')}>Dark</DropdownMenu.Item>\n\t\t\t<DropdownMenu.Item on:click={() => resetMode()}>System</DropdownMenu.Item>\n\t\t</DropdownMenu.Content>\n\t</DropdownMenu.Root>\n\n\t<Button variant=\"outline\" class=\"fixed right-16 top-4\" size=\"icon\" on:click={clearTodos}>\n\t\t<Trash class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t<span class=\"sr-only\">Clear Todos</span>\n\t</Button>\n\n\t<h1 class=\"mt-6 text-center text-4xl text-yellow-500\">Whiteboard</h1>\n\n\t<Card class=\"fixed left-4 top-4 z-50 flex gap-2 rounded-lg p-3\">\n\t\t<Input type=\"text\" bind:value={todoInput} placeholder=\"Add a new item\" class=\"w-72\" />\n\t\t<Button variant=\"default\" on:click={addTodo} class=\"bg-yellow-500 hover:bg-primary/90\">\n\t\t\tAdd Item\n\t\t</Button>\n\t</Card>\n\n\t<!-- Drawing Tools -->\n\t<Card class=\"fixed bottom-4 left-4 z-50 flex gap-2 rounded-lg p-3\">\n\t\t<Button\n\t\t\tvariant={drawingMode ? 'default' : 'outline'}\n\t\t\ton:click={toggleDrawingMode}\n\t\t\tclass={drawingMode ? 'bg-yellow-500' : ''}\n\t\t>\n\t\t\t<Pencil class=\"mr-2 h-[1.2rem] w-[1.2rem]\" />\n\t\t\tDrawing {drawingMode ? 'On' : 'Off'}\n\t\t</Button>\n\n\t\t{#if drawingMode}\n\t\t\t<Button\n\t\t\t\tvariant={tool === 'pencil' ? 'default' : 'outline'}\n\t\t\t\ton:click={() => setDrawingTool('pencil')}\n\t\t\t\tclass={tool === 'pencil' ? 'bg-blue-500' : ''}\n\t\t\t>\n\t\t\t\t<Pencil class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t</Button>\n\n\t\t\t<Button\n\t\t\t\tvariant={tool === 'eraser' ? 'default' : 'outline'}\n\t\t\t\ton:click={() => setDrawingTool('eraser')}\n\t\t\t\tclass={tool === 'eraser' ? 'bg-red-500' : ''}\n\t\t\t>\n\t\t\t\t<Eraser class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t</Button>\n\n\t\t\t<div class=\"flex flex-wrap items-center gap-1\" class:opacity-50={tool === 'eraser'}>\n\t\t\t\t{#each predefinedColors as color}\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={color}\n\t\t\t\t\t\tclass=\"flex h-6 w-6 cursor-pointer items-center justify-center rounded-full border border-gray-300 dark:border-gray-600\"\n\t\t\t\t\t\tstyle=\"background-color: {color === '#000000' &&\n\t\t\t\t\t\tdocument.documentElement.classList.contains('dark')\n\t\t\t\t\t\t\t? '#FFFFFF'\n\t\t\t\t\t\t\t: color};\"\n\t\t\t\t\t\ton:click={() => (strokeColor = color)}\n\t\t\t\t\t\tdisabled={tool === 'eraser'}\n\t\t\t\t\t\taria-label={`Select color ${color}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{#if color === strokeColor}\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclass=\"{color === '#000000' ? 'text-white dark:text-black' : 'text-white'} text-xs\"\n\t\t\t\t\t\t\t\t>✓</span\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</button>\n\t\t\t\t{/each}\n\t\t\t</div>\n\n\t\t\t<input\n\t\t\t\ttype=\"range\"\n\t\t\t\tbind:value={strokeWidth}\n\t\t\t\tmin=\"1\"\n\t\t\t\tmax=\"20\"\n\t\t\t\tclass=\"w-24\"\n\t\t\t\taria-label=\"Stroke width\"\n\t\t\t/>\n\n\t\t\t<Button variant=\"outline\" on:click={clearDrawings} class=\"ml-2\">\n\t\t\t\t<Trash class=\"mr-2 h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\tClear Drawing\n\t\t\t</Button>\n\t\t{/if}\n\t</Card>\n</nav>\n\n{#each todos as todo (todo.id)}\n\t<TodoItem\n\t\t{todo}\n\t\t{editingId}\n\t\t{dragStart}\n\t\t{finishEditing}\n\t\t{updateTodo}\n\t\t{duplicate}\n\t\t{deleteTodo}\n\t\t{startEditing}\n\t/>\n{/each}\n```\n\n\nlets make the drawing menu collapsable\nI'll implement a collapsible drawing menu to clean up the UI. Here's how we'll do it:\n\n<patch>\n<title>Add collapsible drawing menu</title>\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<description>Add a new state variable for collapsed menu</description>\n<operation>insert_after</operation>\n<old_text>let drawingMode = false;\nlet strokeColor = '#000000';\nlet strokeWidth = 2;</old_text>\n<new_text>\nlet menuCollapsed = false;</new_text>\n</edit>\n\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<description>Add a function to toggle the menu collapsed state</description>\n<operation>insert_after</operation>\n<old_text>function setDrawingTool(newTool: 'pencil' | 'eraser') {\n\ttool = newTool;\n}</old_text>\n<new_text>\n\nfunction toggleMenuCollapse() {\n\tmenuCollapsed = !menuCollapsed;\n}</new_text>\n</edit>\n\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<description>Update the drawing tools card to be collapsible</description>\n<operation>update</operation>\n<old_text><!-- Drawing Tools -->\n\t<Card class=\"fixed bottom-4 left-4 z-50 flex gap-2 rounded-lg p-3\">\n\t\t<Button\n\t\t\tvariant={drawingMode ? 'default' : 'outline'}\n\t\t\ton:click={toggleDrawingMode}\n\t\t\tclass={drawingMode ? 'bg-yellow-500' : ''}\n\t\t>\n\t\t\t<Pencil class=\"mr-2 h-[1.2rem] w-[1.2rem]\" />\n\t\t\tDrawing {drawingMode ? 'On' : 'Off'}\n\t\t</Button>\n\n\t\t{#if drawingMode}\n\t\t\t<Button\n\t\t\t\tvariant={tool === 'pencil' ? 'default' : 'outline'}\n\t\t\t\ton:click={() => setDrawingTool('pencil')}\n\t\t\t\tclass={tool === 'pencil' ? 'bg-blue-500' : ''}\n\t\t\t>\n\t\t\t\t<Pencil class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t</Button>\n\n\t\t\t<Button\n\t\t\t\tvariant={tool === 'eraser' ? 'default' : 'outline'}\n\t\t\t\ton:click={() => setDrawingTool('eraser')}\n\t\t\t\tclass={tool === 'eraser' ? 'bg-red-500' : ''}\n\t\t\t>\n\t\t\t\t<Eraser class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t</Button>\n\n\t\t\t<div class=\"flex flex-wrap items-center gap-1\" class:opacity-50={tool === 'eraser'}>\n\t\t\t\t{#each predefinedColors as color}\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={color}\n\t\t\t\t\t\tclass=\"flex h-6 w-6 cursor-pointer items-center justify-center rounded-full border border-gray-300 dark:border-gray-600\"\n\t\t\t\t\t\tstyle=\"background-color: {color === '#000000' &&\n\t\t\t\t\t\tdocument.documentElement.classList.contains('dark')\n\t\t\t\t\t\t\t? '#FFFFFF'\n\t\t\t\t\t\t\t: color};\"\n\t\t\t\t\t\ton:click={() => (strokeColor = color)}\n\t\t\t\t\t\tdisabled={tool === 'eraser'}\n\t\t\t\t\t\taria-label={`Select color ${color}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{#if color === strokeColor}\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclass=\"{color === '#000000' ? 'text-white dark:text-black' : 'text-white'} text-xs\"\n\t\t\t\t\t\t\t\t>✓</span\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</button>\n\t\t\t\t{/each}\n\t\t\t</div>\n\n\t\t\t<input\n\t\t\t\ttype=\"range\"\n\t\t\t\tbind:value={strokeWidth}\n\t\t\t\tmin=\"1\"\n\t\t\t\tmax=\"20\"\n\t\t\t\tclass=\"w-24\"\n\t\t\t\taria-label=\"Stroke width\"\n\t\t\t/>\n\n\t\t\t<Button variant=\"outline\" on:click={clearDrawings} class=\"ml-2\">\n\t\t\t\t<Trash class=\"mr-2 h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\tClear Drawing\n\t\t\t</Button>\n\t\t{/if}\n\t</Card></old_text>\n<new_text><!-- Drawing Tools -->\n\t<Card class=\"fixed bottom-4 left-4 z-50 rounded-lg p-3 transition-all duration-300\" \n\t\tclass:w-auto={!menuCollapsed} \n\t\tclass:w-min={menuCollapsed}>\n\t\t<div class=\"flex items-center gap-2\">\n\t\t\t<Button\n\t\t\t\tvariant={drawingMode ? 'default' : 'outline'}\n\t\t\t\ton:click={toggleDrawingMode}\n\t\t\t\tclass={drawingMode ? 'bg-yellow-500' : ''}\n\t\t\t>\n\t\t\t\t<Pencil class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\t{#if !menuCollapsed}\n\t\t\t\t\t<span class=\"ml-2\">Drawing {drawingMode ? 'On' : 'Off'}</span>\n\t\t\t\t{/if}\n\t\t\t</Button>\n\n\t\t\t<Button\n\t\t\t\tvariant=\"ghost\"\n\t\t\t\ton:click={toggleMenuCollapse}\n\t\t\t\tclass=\"ml-auto\" \n\t\t\t\tsize=\"sm\"\n\t\t\t\taria-label={menuCollapsed ? \"Expand menu\" : \"Collapse menu\"}\n\t\t\t>\n\t\t\t\t{#if menuCollapsed}\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m9 18 6-6-6-6\"/></svg>\n\t\t\t\t{:else}\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m15 18-6-6 6-6\"/></svg>\n\t\t\t\t{/if}\n\t\t\t</Button>\n\t\t</div>\n\n\t\t{#if drawingMode && !menuCollapsed}\n\t\t\t<div class=\"mt-2 flex flex-wrap gap-2\">\n\t\t\t\t<div class=\"flex gap-2\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={tool === 'pencil' ? 'default' : 'outline'}\n\t\t\t\t\t\ton:click={() => setDrawingTool('pencil')}\n\t\t\t\t\t\tclass={tool === 'pencil' ? 'bg-blue-500' : ''}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Pencil class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant={tool === 'eraser' ? 'default' : 'outline'}\n\t\t\t\t\t\ton:click={() => setDrawingTool('eraser')}\n\t\t\t\t\t\tclass={tool === 'eraser' ? 'bg-red-500' : ''}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Eraser class=\"h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"flex flex-wrap items-center gap-1\" class:opacity-50={tool === 'eraser'}>\n\t\t\t\t\t{#each predefinedColors as color}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tkey={color}\n\t\t\t\t\t\t\tclass=\"flex h-6 w-6 cursor-pointer items-center justify-center rounded-full border border-gray-300 dark:border-gray-600\"\n\t\t\t\t\t\t\tstyle=\"background-color: {color === '#000000' &&\n\t\t\t\t\t\t\tdocument.documentElement.classList.contains('dark')\n\t\t\t\t\t\t\t\t? '#FFFFFF'\n\t\t\t\t\t\t\t\t: color};\"\n\t\t\t\t\t\t\ton:click={() => (strokeColor = color)}\n\t\t\t\t\t\t\tdisabled={tool === 'eraser'}\n\t\t\t\t\t\t\taria-label={`Select color ${color}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{#if color === strokeColor}\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclass=\"{color === '#000000' ? 'text-white dark:text-black' : 'text-white'} text-xs\"\n\t\t\t\t\t\t\t\t\t>✓</span\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"flex items-center gap-2\">\n\t\t\t\t\t<span class=\"text-sm\">Width:</span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tbind:value={strokeWidth}\n\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\tmax=\"20\"\n\t\t\t\t\t\tclass=\"w-24\"\n\t\t\t\t\t\taria-label=\"Stroke width\"\n\t\t\t\t\t/>\n\t\t\t\t\t<span class=\"text-sm\">{strokeWidth}px</span>\n\t\t\t\t</div>\n\n\t\t\t\t<Button variant=\"outline\" on:click={clearDrawings}>\n\t\t\t\t\t<Trash class=\"mr-2 h-[1.2rem] w-[1.2rem]\" />\n\t\t\t\t\tClear Drawing\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t{/if}\n\t</Card></new_text>\n</edit>\n\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<description>Update keyboard shortcuts to toggle menu collapse</description>\n<operation>insert_after</operation>\n<old_text>\t\t// Set tool to eraser with 'e' key\n\t\tif (event.key === 'e' && drawingMode) {\n\t\t\ttool = 'eraser';\n\t\t}</old_text>\n<new_text>\n\n\t\t// Toggle menu collapse with 'm' key\n\t\tif (event.key === 'm' && !editingId) {\n\t\t\t// Check if not typing in an input\n\t\t\tconst activeElement = document.activeElement;\n\t\t\tconst isInput =\n\t\t\t\tactiveElement?.tagName === 'INPUT' ||\n\t\t\t\tactiveElement?.tagName === 'TEXTAREA' ||\n\t\t\t\tactiveElement?.isContentEditable;\n\n\t\t\tif (!isInput) {\n\t\t\t\ttoggleMenuCollapse();\n\t\t\t}\n\t\t}</new_text>\n</edit>\n</patch>\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":31}}},{"id":{"replica_id":0,"value":12},"start":14382,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":32}}},{"id":{"replica_id":0,"value":13},"start":21045,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":33}}}],"summary":"I need to implement a collapsible drawing tools menu on this Svelte whiteboard application.","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":2,"end":14341},"icon":"File","label":"todos/src/routes/+page.svelte","metadata":{"path":"todos/src/routes/+page.svelte"}}]}