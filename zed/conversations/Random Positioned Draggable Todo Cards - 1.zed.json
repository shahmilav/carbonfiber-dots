{"id":"3fdbc3b5-908e-47c9-b6ec-b5ca41dc905c","zed":"context","version":"0.4.0","text":"\n\n\nMake a todo app that just puts a \"todo card\" at a random position on the screen. The cards should be draggable and resizable.\n# Random Todo Card App\n\nHere's a simple todo app that creates draggable and resizable todo cards at random positions on the screen.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Random Todo Cards</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f5f5f5;\n            margin: 0;\n            padding: 20px;\n            overflow: hidden;\n            height: 100vh;\n        }\n\n        .controls {\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            z-index: 1000;\n            background-color: white;\n            padding: 10px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n        }\n\n        #todoInput {\n            padding: 8px;\n            margin-right: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            width: 250px;\n        }\n\n        button {\n            padding: 8px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n\n        .todo-card {\n            position: absolute;\n            min-width: 200px;\n            min-height: 100px;\n            background-color: #fff;\n            border-radius: 5px;\n            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n            padding: 15px;\n            cursor: move;\n            resize: both;\n            overflow: auto;\n            z-index: 10;\n        }\n\n        .todo-card:hover {\n            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n        }\n\n        .todo-content {\n            margin-bottom: 10px;\n            word-wrap: break-word;\n        }\n\n        .delete-btn {\n            position: absolute;\n            top: 5px;\n            right: 5px;\n            background-color: #f44336;\n            color: white;\n            border: none;\n            border-radius: 50%;\n            width: 20px;\n            height: 20px;\n            line-height: 18px;\n            font-size: 12px;\n            cursor: pointer;\n            text-align: center;\n            padding: 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"controls\">\n        <input type=\"text\" id=\"todoInput\" placeholder=\"Enter your todo\">\n        <button onclick=\"addTodo()\">Add Todo</button>\n    </div>\n\n    <script>\n        // Track elements that are being dragged\n        let activeElement = null;\n        let initialX, initialY, currentX, currentY;\n        let offsetX = 0, offsetY = 0;\n\n        function addTodo() {\n            const todoText = document.getElementById('todoInput').value.trim();\n            if (todoText === '') return;\n\n            // Create a new todo card\n            const todoCard = document.createElement('div');\n            todoCard.className = 'todo-card';\n            \n            // Generate random position within viewport\n            const maxX = window.innerWidth - 250;\n            const maxY = window.innerHeight - 150;\n            const randomX = Math.max(100, Math.floor(Math.random() * maxX));\n            const randomY = Math.max(100, Math.floor(Math.random() * maxY));\n            \n            todoCard.style.left = `${randomX}px`;\n            todoCard.style.top = `${randomY}px`;\n            \n            // Create content\n            const todoContent = document.createElement('div');\n            todoContent.className = 'todo-content';\n            todoContent.textContent = todoText;\n            \n            // Create delete button\n            const deleteBtn = document.createElement('button');\n            deleteBtn.className = 'delete-btn';\n            deleteBtn.innerHTML = '×';\n            deleteBtn.onclick = function() {\n                todoCard.remove();\n            };\n            \n            // Add components to the card\n            todoCard.appendChild(todoContent);\n            todoCard.appendChild(deleteBtn);\n            \n            // Add the card to the body\n            document.body.appendChild(todoCard);\n            \n            // Clear the input\n            document.getElementById('todoInput').value = '';\n            \n            // Add event listeners for dragging\n            todoCard.addEventListener('mousedown', dragStart);\n        }\n\n        function dragStart(e) {\n            // Ignore if clicking the delete button\n            if (e.target.className === 'delete-btn') return;\n            \n            activeElement = e.target.closest('.todo-card');\n            \n            // Bring to front\n            const cards = document.querySelectorAll('.todo-card');\n            cards.forEach(card => {\n                card.style.zIndex = \"10\";\n            });\n            activeElement.style.zIndex = \"100\";\n            \n            initialX = e.clientX;\n            initialY = e.clientY;\n            \n            offsetX = activeElement.offsetLeft;\n            offsetY = activeElement.offsetTop;\n            \n            document.addEventListener('mousemove', drag);\n            document.addEventListener('mouseup', dragEnd);\n        }\n\n        function drag(e) {\n            if (activeElement) {\n                e.preventDefault();\n                \n                currentX = e.clientX - initialX;\n                currentY = e.clientY - initialY;\n                \n                activeElement.style.left = `${offsetX + currentX}px`;\n                activeElement.style.top = `${offsetY + currentY}px`;\n            }\n        }\n\n        function dragEnd() {\n            activeElement = null;\n            document.removeEventListener('mousemove', drag);\n            document.removeEventListener('mouseup', dragEnd);\n        }\n    </script>\n</body>\n</html>\n```\n\n## Features:\n\n1. **Random Positioning**: Each new todo card appears at a random position on the screen.\n2. **Draggable Cards**: Click and drag to move cards around the screen.\n3. **Resizable Cards**: Grab the bottom-right corner to resize any card.\n4. **Delete Function**: Each card has a delete button (×) to remove it.\n5. **Z-index Management**: Clicked cards are brought to the front.\n\nTo use the app:\n1. Type your todo in the input field.\n2. Click \"Add Todo\" to create a new card at a random position.\n3. Drag cards by clicking and holding on them.\n4. Resize cards by dragging the bottom-right corner.\n5. Delete cards by clicking the × button.\n```svelte todos/src/routes/+page.svelte\n```\n\n\nLooking at the provided code snippet, I notice this is an empty Svelte file for a todos page. I'll help you implement a random todo card app that creates draggable and resizable todo cards at random positions.\n\n<patch>\n<title>Implement random todo card app</title>\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<operation>create</operation>\n<new_text>\n<script>\n  import { onMount } from 'svelte';\n  \n  let todoInput = '';\n  let activeElement = null;\n  let initialX, initialY, offsetX, offsetY;\n  \n  function addTodo() {\n    if (!todoInput.trim()) return;\n    \n    // Create a new todo element\n    const todoEl = document.createElement('div');\n    todoEl.className = 'todo-card';\n    \n    // Generate random position within viewport\n    const maxX = window.innerWidth - 250;\n    const maxY = window.innerHeight - 150;\n    const randomX = Math.max(100, Math.floor(Math.random() * maxX));\n    const randomY = Math.max(100, Math.floor(Math.random() * maxY));\n    \n    todoEl.style.left = `${randomX}px`;\n    todoEl.style.top = `${randomY}px`;\n    \n    // Create todo content\n    const todoContent = document.createElement('div');\n    todoContent.className = 'todo-content';\n    todoContent.textContent = todoInput;\n    \n    // Create delete button\n    const deleteBtn = document.createElement('button');\n    deleteBtn.className = 'delete-btn';\n    deleteBtn.textContent = '×';\n    deleteBtn.onclick = () => todoEl.remove();\n    \n    // Add components to card\n    todoEl.appendChild(todoContent);\n    todoEl.appendChild(deleteBtn);\n    \n    // Add to document\n    document.body.appendChild(todoEl);\n    \n    // Clear input\n    todoInput = '';\n    \n    // Setup drag events\n    todoEl.addEventListener('mousedown', dragStart);\n  }\n  \n  function dragStart(e) {\n    // Ignore if clicking delete button\n    if (e.target.className === 'delete-btn') return;\n    \n    activeElement = e.target.closest('.todo-card');\n    \n    // Bring to front\n    document.querySelectorAll('.todo-card').forEach(card => {\n      card.style.zIndex = '10';\n    });\n    activeElement.style.zIndex = '100';\n    \n    initialX = e.clientX;\n    initialY = e.clientY;\n    \n    offsetX = activeElement.offsetLeft;\n    offsetY = activeElement.offsetTop;\n    \n    document.addEventListener('mousemove', drag);\n    document.addEventListener('mouseup', dragEnd);\n  }\n  \n  function drag(e) {\n    if (activeElement) {\n      e.preventDefault();\n      \n      const currentX = e.clientX - initialX;\n      const currentY = e.clientY - initialY;\n      \n      activeElement.style.left = `${offsetX + currentX}px`;\n      activeElement.style.top = `${offsetY + currentY}px`;\n    }\n  }\n  \n  function dragEnd() {\n    activeElement = null;\n    document.removeEventListener('mousemove', drag);\n    document.removeEventListener('mouseup', dragEnd);\n  }\n  \n  function handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      addTodo();\n    }\n  }\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"controls\">\n  <input \n    type=\"text\" \n    bind:value={todoInput} \n    placeholder=\"Enter your todo\" \n  />\n  <button on:click={addTodo}>Add Todo</button>\n</div>\n\n<style>\n  :global(body) {\n    font-family: Arial, sans-serif;\n    background-color: #f5f5f5;\n    margin: 0;\n    padding: 20px;\n    overflow: hidden;\n    height: 100vh;\n  }\n\n  .controls {\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    z-index: 1000;\n    background-color: white;\n    padding: 10px;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n  }\n\n  input {\n    padding: 8px;\n    margin-right: 5px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    width: 250px;\n  }\n\n  button {\n    padding: 8px 15px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: #45a049;\n  }\n\n  :global(.todo-card) {\n    position: absolute;\n    min-width: 200px;\n    min-height: 100px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n    padding: 15px;\n    cursor: move;\n    resize: both;\n    overflow: auto;\n    z-index: 10;\n  }\n\n  :global(.todo-card:hover) {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n  }\n\n  :global(.todo-content) {\n    margin-bottom: 10px;\n    word-wrap: break-word;\n  }\n\n  :global(.delete-btn) {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    background-color: #f44336;\n    color: white;\n    border: none;\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    line-height: 18px;\n    font-size: 12px;\n    cursor: pointer;\n    text-align: center;\n    padding: 0;\n  }\n</style>\n</new_text>\n</edit>\n</patch>\n```svelte todos/src/routes/+page.svelte\n<script>\n\tlet todoInput = '';\n\tlet activeElement = null;\n\tlet initialX, initialY, offsetX, offsetY;\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Create a new todo element\n\t\tconst todoEl = document.createElement('div');\n\t\ttodoEl.className = 'todo-card';\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\ttodoEl.style.left = `${randomX}px`;\n\t\ttodoEl.style.top = `${randomY}px`;\n\n\t\t// Create todo content\n\t\tconst todoContent = document.createElement('div');\n\t\ttodoContent.className = 'todo-content';\n\t\ttodoContent.textContent = todoInput;\n\n\t\t// Create delete button\n\t\tconst deleteBtn = document.createElement('button');\n\t\tdeleteBtn.className = 'delete-btn';\n\t\tdeleteBtn.textContent = '×';\n\t\tdeleteBtn.onclick = () => todoEl.remove();\n\n\t\t// Add components to card\n\t\ttodoEl.appendChild(todoContent);\n\t\ttodoEl.appendChild(deleteBtn);\n\n\t\t// Add to document\n\t\tdocument.body.appendChild(todoEl);\n\n\t\t// Clear input\n\t\ttodoInput = '';\n\n\t\t// Setup drag events\n\t\ttodoEl.addEventListener('mousedown', dragStart);\n\t}\n\n\tfunction dragStart(e) {\n\t\t// Ignore if clicking delete button\n\t\tif (e.target.className === 'delete-btn') return;\n\n\t\tactiveElement = e.target.closest('.todo-card');\n\n\t\t// Bring to front\n\t\tdocument.querySelectorAll('.todo-card').forEach((card) => {\n\t\t\tcard.style.zIndex = '10';\n\t\t});\n\t\tactiveElement.style.zIndex = '100';\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\toffsetX = activeElement.offsetLeft;\n\t\toffsetY = activeElement.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\tactiveElement.style.left = `${offsetX + currentX}px`;\n\t\t\tactiveElement.style.top = `${offsetY + currentY}px`;\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\taddTodo();\n\t\t}\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"controls\">\n\t<input type=\"text\" bind:value={todoInput} placeholder=\"Enter your todo\" />\n\t<button on:click={addTodo}>Add Todo</button>\n</div>\n\n<style>\n\t:global(body) {\n\t\tfont-family: Arial, sans-serif;\n\t\tbackground-color: #f5f5f5;\n\t\tmargin: 0;\n\t\tpadding: 20px;\n\t\toverflow: hidden;\n\t\theight: 100vh;\n\t}\n\n\t.controls {\n\t\tposition: fixed;\n\t\ttop: 20px;\n\t\tleft: 20px;\n\t\tz-index: 1000;\n\t\tbackground-color: white;\n\t\tpadding: 10px;\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n\t}\n\n\tinput {\n\t\tpadding: 8px;\n\t\tmargin-right: 5px;\n\t\tborder: 1px solid #ddd;\n\t\tborder-radius: 4px;\n\t\twidth: 250px;\n\t}\n\n\tbutton {\n\t\tpadding: 8px 15px;\n\t\tbackground-color: #4caf50;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 4px;\n\t\tcursor: pointer;\n\t}\n\n\tbutton:hover {\n\t\tbackground-color: #45a049;\n\t}\n\n\t:global(.todo-card) {\n\t\tposition: absolute;\n\t\tmin-width: 200px;\n\t\tmin-height: 100px;\n\t\tbackground-color: #fff;\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n\t\tpadding: 15px;\n\t\tcursor: move;\n\t\toverflow: auto;\n\t\tz-index: 10;\n\t}\n\n\t:global(.todo-card:hover) {\n\t\tbox-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n\t}\n\n\t:global(.todo-content) {\n\t\tmargin-bottom: 10px;\n\t\tword-wrap: break-word;\n\t}\n\n\t:global(.delete-btn) {\n\t\tposition: absolute;\n\t\ttop: 5px;\n\t\tright: 5px;\n\t\tbackground-color: #f44336;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 50%;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tline-height: 18px;\n\t\tfont-size: 12px;\n\t\tcursor: pointer;\n\t\ttext-align: center;\n\t\tpadding: 0;\n\t}\n</style>\n```\n\nuse shadcn-svelte and tailwind\n<patch>\n<title>Migrate todo app to use shadcn-svelte and tailwind</title>\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<operation>update</operation>\n<old_text><script>\n\tlet todoInput = '';\n\tlet activeElement = null;\n\tlet initialX, initialY, offsetX, offsetY;\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Create a new todo element\n\t\tconst todoEl = document.createElement('div');\n\t\ttodoEl.className = 'todo-card';\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\ttodoEl.style.left = `${randomX}px`;\n\t\ttodoEl.style.top = `${randomY}px`;\n\n\t\t// Create todo content\n\t\tconst todoContent = document.createElement('div');\n\t\ttodoContent.className = 'todo-content';\n\t\ttodoContent.textContent = todoInput;\n\n\t\t// Create delete button\n\t\tconst deleteBtn = document.createElement('button');\n\t\tdeleteBtn.className = 'delete-btn';\n\t\tdeleteBtn.textContent = '×';\n\t\tdeleteBtn.onclick = () => todoEl.remove();\n\n\t\t// Add components to card\n\t\ttodoEl.appendChild(todoContent);\n\t\ttodoEl.appendChild(deleteBtn);\n\n\t\t// Add to document\n\t\tdocument.body.appendChild(todoEl);\n\n\t\t// Clear input\n\t\ttodoInput = '';\n\n\t\t// Setup drag events\n\t\ttodoEl.addEventListener('mousedown', dragStart);\n\t}\n\n\tfunction dragStart(e) {\n\t\t// Ignore if clicking delete button\n\t\tif (e.target.className === 'delete-btn') return;\n\n\t\tactiveElement = e.target.closest('.todo-card');\n\n\t\t// Bring to front\n\t\tdocument.querySelectorAll('.todo-card').forEach((card) => {\n\t\t\tcard.style.zIndex = '10';\n\t\t});\n\t\tactiveElement.style.zIndex = '100';\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\toffsetX = activeElement.offsetLeft;\n\t\toffsetY = activeElement.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\tactiveElement.style.left = `${offsetX + currentX}px`;\n\t\t\tactiveElement.style.top = `${offsetY + currentY}px`;\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\taddTodo();\n\t\t}\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"controls\">\n\t<input type=\"text\" bind:value={todoInput} placeholder=\"Enter your todo\" />\n\t<button on:click={addTodo}>Add Todo</button>\n</div>\n\n<style>\n\t:global(body) {\n\t\tfont-family: Arial, sans-serif;\n\t\tbackground-color: #f5f5f5;\n\t\tmargin: 0;\n\t\tpadding: 20px;\n\t\toverflow: hidden;\n\t\theight: 100vh;\n\t}\n\n\t.controls {\n\t\tposition: fixed;\n\t\ttop: 20px;\n\t\tleft: 20px;\n\t\tz-index: 1000;\n\t\tbackground-color: white;\n\t\tpadding: 10px;\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n\t}\n\n\tinput {\n\t\tpadding: 8px;\n\t\tmargin-right: 5px;\n\t\tborder: 1px solid #ddd;\n\t\tborder-radius: 4px;\n\t\twidth: 250px;\n\t}\n\n\tbutton {\n\t\tpadding: 8px 15px;\n\t\tbackground-color: #4caf50;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 4px;\n\t\tcursor: pointer;\n\t}\n\n\tbutton:hover {\n\t\tbackground-color: #45a049;\n\t}\n\n\t:global(.todo-card) {\n\t\tposition: absolute;\n\t\tmin-width: 200px;\n\t\tmin-height: 100px;\n\t\tbackground-color: #fff;\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n\t\tpadding: 15px;\n\t\tcursor: move;\n\t\toverflow: auto;\n\t\tz-index: 10;\n\t}\n\n\t:global(.todo-card:hover) {\n\t\tbox-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n\t}\n\n\t:global(.todo-content) {\n\t\tmargin-bottom: 10px;\n\t\tword-wrap: break-word;\n\t}\n\n\t:global(.delete-btn) {\n\t\tposition: absolute;\n\t\ttop: 5px;\n\t\tright: 5px;\n\t\tbackground-color: #f44336;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 50%;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tline-height: 18px;\n\t\tfont-size: 12px;\n\t\tcursor: pointer;\n\t\ttext-align: center;\n\t\tpadding: 0;\n\t}\n</style></old_text>\n<new_text><script>\n\timport { Input } from \"$lib/components/ui/input\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport { Card, CardContent } from \"$lib/components/ui/card\";\n\timport { X } from \"lucide-svelte\";\n\timport { onMount } from \"svelte\";\n\n\tlet todoInput = '';\n\tlet activeElement = null;\n\tlet initialX, initialY, offsetX, offsetY;\n\tlet todos = [];\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\t// Create a new todo object\n\t\tconst todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todoInput,\n\t\t\tx: randomX,\n\t\t\ty: randomY,\n\t\t\tzIndex: 10\n\t\t};\n\n\t\ttodos = [...todos, todo];\n\t\ttodoInput = '';\n\t}\n\n\tfunction deleteTodo(id) {\n\t\ttodos = todos.filter(todo => todo.id !== id);\n\t}\n\n\tfunction dragStart(e, todo) {\n\t\t// Set active element\n\t\tactiveElement = todo;\n\n\t\t// Bring to front\n\t\ttodos = todos.map(t => ({\n\t\t\t...t,\n\t\t\tzIndex: t.id === todo.id ? 100 : 10\n\t\t}));\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\t// Find the DOM element\n\t\tconst element = document.getElementById(todo.id);\n\t\toffsetX = element.offsetLeft;\n\t\toffsetY = element.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\t// Update the position in the todos array\n\t\t\ttodos = todos.map(todo => {\n\t\t\t\tif (todo.id === activeElement.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tx: offsetX + currentX,\n\t\t\t\t\t\ty: offsetY + currentY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\taddTodo();\n\t\t}\n\t}\n\n\t// Enable resize functionality\n\tonMount(() => {\n\t\tconst resizeObserver = new ResizeObserver(entries => {\n\t\t\t// Handle resize logic if needed\n\t\t});\n\n\t\treturn () => {\n\t\t\tresizeObserver.disconnect();\n\t\t};\n\t});\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"fixed top-4 left-4 z-50 flex gap-2 p-3 bg-white rounded-lg shadow-md\">\n\t<Input type=\"text\" bind:value={todoInput} placeholder=\"Enter your todo\" class=\"w-72\" />\n\t<Button variant=\"default\" on:click={addTodo} class=\"bg-primary hover:bg-primary/90\">Add Todo</Button>\n</div>\n\n{#each todos as todo (todo.id)}\n\t<div \n\t\tid={todo.id}\n\t\tclass=\"todo-card absolute min-w-[200px] min-h-[100px] bg-card rounded-md shadow-md cursor-move p-4 resize overflow-auto\" \n\t\tstyle=\"left: {todo.x}px; top: {todo.y}px; z-index: {todo.zIndex};\"\n\t\ton:mousedown={(e) => dragStart(e, todo)}\n\t>\n\t\t<CardContent class=\"p-2\">\n\t\t\t<p class=\"text-card-foreground break-words mb-2\">{todo.text}</p>\n\t\t</CardContent>\n\t\t<Button \n\t\t\tvariant=\"destructive\" \n\t\t\tsize=\"icon\" \n\t\t\tclass=\"absolute top-1 right-1 h-6 w-6 rounded-full\" \n\t\t\ton:click={() => deleteTodo(todo.id)}\n\t\t>\n\t\t\t<X class=\"h-3 w-3\" />\n\t\t</Button>\n\t</div>\n{/each}\n</new_text>\n</edit>\n</patch>\nLets make each todo editable. Also, lets store the items and positons in localstorage.\nI'll create a patch to make the todos editable and add local storage functionality to persist the todos between sessions.\n\n<patch>\n<title>Make todos editable and add localStorage persistence</title>\n<edit>\n<path>todos/src/routes/+page.svelte</path>\n<operation>update</operation>\n<old_text><script>\n\timport { Input } from \"$lib/components/ui/input\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport { Card, CardContent } from \"$lib/components/ui/card\";\n\timport { X } from \"lucide-svelte\";\n\timport { onMount } from \"svelte\";\n\n\tlet todoInput = '';\n\tlet activeElement = null;\n\tlet initialX, initialY, offsetX, offsetY;\n\tlet todos = [];\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\t// Create a new todo object\n\t\tconst todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todoInput,\n\t\t\tx: randomX,\n\t\t\ty: randomY,\n\t\t\tzIndex: 10\n\t\t};\n\n\t\ttodos = [...todos, todo];\n\t\ttodoInput = '';\n\t}\n\n\tfunction deleteTodo(id) {\n\t\ttodos = todos.filter(todo => todo.id !== id);\n\t}\n\n\tfunction dragStart(e, todo) {\n\t\t// Set active element\n\t\tactiveElement = todo;\n\n\t\t// Bring to front\n\t\ttodos = todos.map(t => ({\n\t\t\t...t,\n\t\t\tzIndex: t.id === todo.id ? 100 : 10\n\t\t}));\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\t// Find the DOM element\n\t\tconst element = document.getElementById(todo.id);\n\t\toffsetX = element.offsetLeft;\n\t\toffsetY = element.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\t// Update the position in the todos array\n\t\t\ttodos = todos.map(todo => {\n\t\t\t\tif (todo.id === activeElement.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tx: offsetX + currentX,\n\t\t\t\t\t\ty: offsetY + currentY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === 'Enter') {\n\t\t\taddTodo();\n\t\t}\n\t}\n\n\t// Enable resize functionality\n\tonMount(() => {\n\t\tconst resizeObserver = new ResizeObserver(entries => {\n\t\t\t// Handle resize logic if needed\n\t\t});\n\n\t\treturn () => {\n\t\t\tresizeObserver.disconnect();\n\t\t};\n\t});\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"fixed top-4 left-4 z-50 flex gap-2 p-3 bg-white rounded-lg shadow-md\">\n\t<Input type=\"text\" bind:value={todoInput} placeholder=\"Enter your todo\" class=\"w-72\" />\n\t<Button variant=\"default\" on:click={addTodo} class=\"bg-primary hover:bg-primary/90\">Add Todo</Button>\n</div>\n\n{#each todos as todo (todo.id)}\n\t<div \n\t\tid={todo.id}\n\t\tclass=\"todo-card absolute min-w-[200px] min-h-[100px] bg-card rounded-md shadow-md cursor-move p-4 resize overflow-auto\" \n\t\tstyle=\"left: {todo.x}px; top: {todo.y}px; z-index: {todo.zIndex};\"\n\t\ton:mousedown={(e) => dragStart(e, todo)}\n\t>\n\t\t<CardContent class=\"p-2\">\n\t\t\t<p class=\"text-card-foreground break-words mb-2\">{todo.text}</p>\n\t\t</CardContent>\n\t\t<Button \n\t\t\tvariant=\"destructive\" \n\t\t\tsize=\"icon\" \n\t\t\tclass=\"absolute top-1 right-1 h-6 w-6 rounded-full\" \n\t\t\ton:click={() => deleteTodo(todo.id)}\n\t\t>\n\t\t\t<X class=\"h-3 w-3\" />\n\t\t</Button>\n\t</div>\n{/each}</old_text>\n<new_text><script>\n\timport { Input } from \"$lib/components/ui/input\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport { Card, CardContent } from \"$lib/components/ui/card\";\n\timport { Textarea } from \"$lib/components/ui/textarea\";\n\timport { X, Edit2 } from \"lucide-svelte\";\n\timport { onMount } from \"svelte\";\n\n\tlet todoInput = '';\n\tlet activeElement = null;\n\tlet initialX, initialY, offsetX, offsetY;\n\tlet todos = [];\n\tlet editingId = null;\n\n\t// Load todos from localStorage on mount\n\tonMount(() => {\n\t\tconst storedTodos = localStorage.getItem('todos');\n\t\tif (storedTodos) {\n\t\t\ttodos = JSON.parse(storedTodos);\n\t\t}\n\n\t\t// Add event listener for beforeunload to save state\n\t\twindow.addEventListener('beforeunload', saveTodos);\n\n\t\tconst resizeObserver = new ResizeObserver(entries => {\n\t\t\t// Handle resize logic if needed\n\t\t});\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('beforeunload', saveTodos);\n\t\t\tresizeObserver.disconnect();\n\t\t};\n\t});\n\n\t// Save todos to localStorage whenever they change\n\t$: {\n\t\tif (todos.length > 0 || typeof window !== 'undefined') {\n\t\t\tsaveTodos();\n\t\t}\n\t}\n\n\tfunction saveTodos() {\n\t\tif (typeof localStorage !== 'undefined') {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\n\t\t}\n\t}\n\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\t// Create a new todo object\n\t\tconst todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todoInput,\n\t\t\tx: randomX,\n\t\t\ty: randomY,\n\t\t\tzIndex: 10,\n\t\t\tediting: false\n\t\t};\n\n\t\ttodos = [...todos, todo];\n\t\ttodoInput = '';\n\t}\n\n\tfunction deleteTodo(id) {\n\t\ttodos = todos.filter(todo => todo.id !== id);\n\t}\n\n\tfunction startEditing(id) {\n\t\teditingId = id;\n\t}\n\n\tfunction updateTodo(id, newText) {\n\t\ttodos = todos.map(todo => \n\t\t\ttodo.id === id \n\t\t\t\t? { ...todo, text: newText } \n\t\t\t\t: todo\n\t\t);\n\t}\n\n\tfunction finishEditing() {\n\t\teditingId = null;\n\t}\n\n\tfunction dragStart(e, todo) {\n\t\t// Don't start drag if we're editing\n\t\tif (editingId === todo.id || e.target.closest('.edit-area')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore if clicking buttons\n\t\tif (e.target.tagName === 'BUTTON' || e.target.closest('button')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set active element\n\t\tactiveElement = todo;\n\n\t\t// Bring to front\n\t\ttodos = todos.map(t => ({\n\t\t\t...t,\n\t\t\tzIndex: t.id === todo.id ? 100 : 10\n\t\t}));\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\t// Find the DOM element\n\t\tconst element = document.getElementById(todo.id);\n\t\toffsetX = element.offsetLeft;\n\t\toffsetY = element.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\t// Update the position in the todos array\n\t\t\ttodos = todos.map(todo => {\n\t\t\t\tif (todo.id === activeElement.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tx: offsetX + currentX,\n\t\t\t\t\t\ty: offsetY + currentY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\tfunction handleKeyDown(e) {\n\t\tif (e.key === 'Enter' && !e.shiftKey && !editingId) {\n\t\t\taddTodo();\n\t\t}\n\t\t\n\t\tif (e.key === 'Escape' && editingId) {\n\t\t\tfinishEditing();\n\t\t}\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<div class=\"fixed top-4 left-4 z-50 flex gap-2 p-3 bg-white rounded-lg shadow-md\">\n\t<Input type=\"text\" bind:value={todoInput} placeholder=\"Enter your todo\" class=\"w-72\" />\n\t<Button variant=\"default\" on:click={addTodo} class=\"bg-primary hover:bg-primary/90\">Add Todo</Button>\n</div>\n\n{#each todos as todo (todo.id)}\n\t<div \n\t\tid={todo.id}\n\t\tclass=\"todo-card absolute min-w-[200px] min-h-[100px] bg-card rounded-md shadow-md cursor-move p-4 resize overflow-auto\" \n\t\tstyle=\"left: {todo.x}px; top: {todo.y}px; z-index: {todo.zIndex};\"\n\t\ton:mousedown={(e) => dragStart(e, todo)}\n\t>\n\t\t<CardContent class=\"p-2\">\n\t\t\t{#if editingId === todo.id}\n\t\t\t\t<div class=\"edit-area\">\n\t\t\t\t\t<Textarea \n\t\t\t\t\t\tvalue={todo.text}\n\t\t\t\t\t\ton:input={(e) => updateTodo(todo.id, e.target.value)}\n\t\t\t\t\t\tclass=\"min-h-[80px] resize-none mb-2\" \n\t\t\t\t\t\tautofocus\n\t\t\t\t\t\ton:blur={finishEditing}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"outline\" size=\"sm\" on:click={finishEditing} class=\"mt-2\">\n\t\t\t\t\t\tDone\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t{:else}\n\t\t\t\t<p class=\"text-card-foreground break-words mb-2\">{todo.text}</p>\n\t\t\t{/if}\n\t\t</CardContent>\n\t\t\n\t\t<div class=\"absolute top-1 right-1 flex gap-1\">\n\t\t\t<Button \n\t\t\t\tvariant=\"secondary\" \n\t\t\t\tsize=\"icon\" \n\t\t\t\tclass=\"h-6 w-6 rounded-full\" \n\t\t\t\ton:click={() => startEditing(todo.id)}\n\t\t\t>\n\t\t\t\t<Edit2 class=\"h-3 w-3\" />\n\t\t\t</Button>\n\t\t\t<Button \n\t\t\t\tvariant=\"destructive\" \n\t\t\t\tsize=\"icon\" \n\t\t\t\tclass=\"h-6 w-6 rounded-full\" \n\t\t\t\ton:click={() => deleteTodo(todo.id)}\n\t\t\t>\n\t\t\t\t<X class=\"h-3 w-3\" />\n\t\t\t</Button>\n\t\t</div>\n\t</div>\n{/each}</new_text>\n</edit>\n</patch>\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":316}}},{"id":{"replica_id":0,"value":17},"start":129,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":317}}},{"id":{"replica_id":0,"value":18},"start":6609,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":318}}},{"id":{"replica_id":0,"value":54},"start":6655,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":319}}},{"id":{"replica_id":0,"value":55},"start":11292,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":320}}},{"id":{"replica_id":0,"value":124},"start":15211,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":321}}},{"id":{"replica_id":0,"value":125},"start":22483,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":322}}},{"id":{"replica_id":0,"value":248},"start":22570,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":323}}},{"id":{"replica_id":0,"value":249},"start":31209,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":324}}}],"summary":"Random Positioned Draggable Todo Cards","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":6609,"end":6653},"icon":"File","label":"todos/src/routes/+page.svelte","metadata":{"path":"todos/src/routes/+page.svelte"}},{"range":{"start":11292,"end":15179},"icon":"File","label":"todos/src/routes/+page.svelte","metadata":{"path":"todos/src/routes/+page.svelte"}}]}