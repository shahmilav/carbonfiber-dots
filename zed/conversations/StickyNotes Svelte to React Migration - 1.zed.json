{"id":"72443829-0046-4760-8540-4cb47f00c47a","zed":"context","version":"0.4.0","text":"\n\n\n```svelte todos/src/routes/+page.svelte\n<script lang=\"ts\">\n\timport { setMode, mode } from 'mode-watcher';\n\timport { Input } from '$lib/components/ui/input';\n\timport { Button } from '$lib/components/ui/button';\n\timport { Card, CardContent } from '$lib/components/ui/card';\n\timport { Textarea } from '$lib/components/ui/textarea';\n\timport { Copy, Edit, Moon, Sun, Trash } from 'lucide-svelte';\n\timport { onMount } from 'svelte';\n\n\tinterface Todo {\n\t\tid: string;\n\t\ttext: string;\n\t\tx: number;\n\t\ty: number;\n\t\tzIndex: number;\n\t\tediting: boolean;\n\t}\n\n\tlet todoInput = '';\n\tlet activeElement: HTMLElement | null = null;\n\tlet initialX: number | null = null;\n\tlet initialY: number | null = null;\n\tlet offsetX: number | null = null;\n\tlet offsetY: number | null = null;\n\tlet todos: Todo[] = [];\n\tlet editingId: string | null = null;\n\n\t// Load todos from localStorage on mount\n\tonMount(() => {\n\t\tconst storedTodos = localStorage.getItem('todos');\n\t\tif (storedTodos) {\n\t\t\ttodos = JSON.parse(storedTodos);\n\t\t}\n\t});\n\n\t// Save todos to localStorage\n\tfunction saveTodos() {\n\t\tif (typeof localStorage !== 'undefined') {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify(todos));\n\t\t}\n\t}\n\n\t// Function to add a new todo\n\tfunction addTodo() {\n\t\tif (!todoInput.trim()) return;\n\n\t\t// Generate random position within viewport\n\t\tconst maxX = window.innerWidth - 250;\n\t\tconst maxY = window.innerHeight - 150;\n\t\tconst randomX = Math.max(100, Math.floor(Math.random() * maxX));\n\t\tconst randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n\t\t// Create a new todo object\n\t\tconst todo = {\n\t\t\tid: crypto.randomUUID(),\n\t\t\ttext: todoInput,\n\t\t\tx: randomX,\n\t\t\ty: randomY,\n\t\t\tzIndex: 10,\n\t\t\tediting: false\n\t\t};\n\n\t\t// Update todos array and save to localStorage\n\t\ttodos = [...todos, todo];\n\t\tsaveTodos(); // Save immediately after adding a todo\n\t\ttodoInput = '';\n\t}\n\n\t// Delete a todo\n\tfunction deleteTodo(id: string) {\n\t\ttodos = todos.filter((todo) => todo.id !== id);\n\t\tsaveTodos(); // Save after deleting a todo\n\t}\n\n\t// Start editing a todo\n\tfunction startEditing(id: string) {\n\t\teditingId = id;\n\t}\n\n\t// Update todo text\n\tfunction updateTodo(id: string, newText: string) {\n\t\ttodos = todos.map((todo) => (todo.id === id ? { ...todo, text: newText } : todo));\n\t\tsaveTodos(); // Save after updating a todo\n\t}\n\n\t// Finish editing\n\tfunction finishEditing() {\n\t\teditingId = null;\n\t}\n\n\t// Dragging logic\n\tfunction dragStart(e, todo) {\n\t\t// Don't start drag if we're editing\n\t\tif (editingId === todo.id || e.target.closest('.edit-area')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ignore if clicking buttons\n\t\tif (e.target.tagName === 'BUTTON' || e.target.closest('button')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set active element\n\t\tactiveElement = todo;\n\n\t\t// Bring to front\n\t\ttodos = todos.map((t) => ({\n\t\t\t...t,\n\t\t\tzIndex: t.id === todo.id ? 100 : 10\n\t\t}));\n\n\t\tinitialX = e.clientX;\n\t\tinitialY = e.clientY;\n\n\t\t// Find the DOM element\n\t\tconst element = document.getElementById(todo.id);\n\t\toffsetX = element.offsetLeft;\n\t\toffsetY = element.offsetTop;\n\n\t\tdocument.addEventListener('mousemove', drag);\n\t\tdocument.addEventListener('mouseup', dragEnd);\n\t}\n\n\t// Handle the drag move\n\tfunction drag(e) {\n\t\tif (activeElement) {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentX = e.clientX - initialX;\n\t\t\tconst currentY = e.clientY - initialY;\n\n\t\t\t// Update the position in the todos array\n\t\t\ttodos = todos.map((todo) => {\n\t\t\t\tif (todo.id === activeElement.id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tx: offsetX + currentX,\n\t\t\t\t\t\ty: offsetY + currentY\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t});\n\t\t\tsaveTodos(); // Save after drag\n\t\t}\n\t}\n\n\tfunction duplicate(id: string) {\n\t\tconst todo = todos.find((todo) => todo.id === id);\n\t\tconsole.log(todo);\n\t\tif (todo) {\n\t\t\tconst newTodo = {\n\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\ttext: todo.text,\n\t\t\t\tx: todo.x + 10,\n\t\t\t\ty: todo.y + 10,\n\t\t\t\tzIndex: todo.zIndex + 1\n\t\t\t};\n\t\t\ttodos = [...todos, newTodo];\n\t\t\tsaveTodos();\n\t\t}\n\t}\n\n\t// End dragging\n\tfunction dragEnd() {\n\t\tactiveElement = null;\n\t\tdocument.removeEventListener('mousemove', drag);\n\t\tdocument.removeEventListener('mouseup', dragEnd);\n\t}\n\n\t// Handle keydown for add/edit functionality\n\tfunction handleKeyDown(event: KeyboardEvent) {\n\t\tif (event.key === 'Enter' && !event.shiftKey && !editingId) {\n\t\t\taddTodo();\n\t\t}\n\n\t\tif (event.key === 'Escape' && editingId) {\n\t\t\tfinishEditing();\n\t\t}\n\t}\n\n\tfunction handleModeChange() {\n\t\tif ($mode === 'light') {\n\t\t\tsetMode('dark');\n\t\t} else {\n\t\t\tsetMode('light');\n\t\t}\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeyDown} />\n\n<nav>\n\t<Button variant=\"ghost\" class=\"fixed right-4 top-4 text-yellow-500\" on:click={handleModeChange}>\n\t\t{#if $mode === 'dark'}\n\t\t\t<Sun />\n\t\t{:else}\n\t\t\t<Moon />\n\t\t{/if}\n\t</Button>\n\n\t<h1 class=\"mt-6 text-center text-4xl text-yellow-500\">StickyNotes</h1>\n\n\t<Card class=\"fixed left-4 top-4 z-50 flex gap-2 rounded-lg p-3 \">\n\t\t<Input type=\"text\" bind:value={todoInput} placeholder=\"Add a new item\" class=\"w-72\" />\n\t\t<Button variant=\"default\" on:click={addTodo} class=\"bg-yellow-500 hover:bg-primary/90\"\n\t\t\t>Add Item</Button\n\t\t>\n\t</Card>\n</nav>\n\n{#each todos as todo (todo.id)}\n\t<div\n\t\trole=\"none\"\n\t\tid={todo.id}\n\t\tclass=\"todo-card absolute cursor-move\"\n\t\tstyle=\"left: {todo.x}px; top: {todo.y}px; z-index: {todo.zIndex};\"\n\t\ton:mousedown={(e) => dragStart(e, todo)}\n\t>\n\t\t<Card\n\t\t\tclass=\"min-h-[100px] min-w-[200px] max-w-[300px] overflow-auto rounded-3xl bg-card p-4 shadow-xl \"\n\t\t>\n\t\t\t<CardContent class=\"mt-2 p-2\">\n\t\t\t\t{#if editingId === todo.id}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Textarea\n\t\t\t\t\t\t\tvalue={todo.text}\n\t\t\t\t\t\t\ton:input={(e) => updateTodo(todo.id, e.target.value)}\n\t\t\t\t\t\t\tclass=\"mb-2 min-h-[80px] w-full resize-none whitespace-pre-wrap border-0 text-xl shadow-none \"\n\t\t\t\t\t\t\tautofocus\n\t\t\t\t\t\t\ton:blur={finishEditing}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button variant=\"outline\" size=\"sm\" on:click={finishEditing} class=\"\">Done</Button>\n\t\t\t\t\t</div>\n\t\t\t\t{:else}\n\t\t\t\t\t<p class=\"mb mt-1 whitespace-pre-wrap break-words text-xl text-card-foreground\">\n\t\t\t\t\t\t{todo.text}\n\t\t\t\t\t</p>\n\t\t\t\t{/if}\n\t\t\t</CardContent>\n\n\t\t\t<div class=\"todo-buttons absolute right-2 top-2 flex gap-1\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclass=\"h-6 w-6 rounded-full\"\n\t\t\t\t\ton:click={() => duplicate(todo.id)}\n\t\t\t\t>\n\t\t\t\t\t<Copy class=\"h-3 w-3\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclass=\"h-6 w-6 rounded-full\"\n\t\t\t\t\ton:click={() => startEditing(todo.id)}\n\t\t\t\t>\n\t\t\t\t\t<Edit class=\"h-3 w-3\" />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\tclass=\"h-6 w-6 rounded-full\"\n\t\t\t\t\ton:click={() => deleteTodo(todo.id)}\n\t\t\t\t>\n\t\t\t\t\t<Trash color=\"red\" class=\"h-3 w-3\" />\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</Card>\n\t</div>\n{/each}\n\n<style>\n\t.todo-buttons {\n\t\topacity: 0;\n\t\ttransition: opacity 0.2s ease-in-out;\n\t}\n\n\t.todo-card:hover .todo-buttons {\n\t\topacity: 1;\n\t}\n\n\t/* Ensure text wraps within cards */\n\t.todo-card p {\n\t\toverflow-wrap: break-word;\n\t\tword-wrap: break-word;\n\t\thyphens: auto;\n\t\tline-height: 1.5;\n\t}\n</style>\n```\n\nConvert this file to Nextjs react (TSX)\nHere's your Nextjs React (TSX) version of the Svelte component:\n\n```tsx\n// app/page.tsx\n'use client';\n\nimport { useEffect, useState, useRef, KeyboardEvent, MouseEvent } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Copy, Edit, Moon, Sun, Trash } from 'lucide-react';\nimport { useTheme } from 'next-themes';\n\ninterface Todo {\n  id: string;\n  text: string;\n  x: number;\n  y: number;\n  zIndex: number;\n  editing?: boolean;\n}\n\nexport default function TodosPage() {\n  const [todoInput, setTodoInput] = useState('');\n  const [activeElement, setActiveElement] = useState<Todo | null>(null);\n  const [initialX, setInitialX] = useState<number | null>(null);\n  const [initialY, setInitialY] = useState<number | null>(null);\n  const [offsetX, setOffsetX] = useState<number | null>(null);\n  const [offsetY, setOffsetY] = useState<number | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const { theme, setTheme } = useTheme();\n\n  // Load todos from localStorage on mount\n  useEffect(() => {\n    const storedTodos = localStorage.getItem('todos');\n    if (storedTodos) {\n      setTodos(JSON.parse(storedTodos));\n    }\n  }, []);\n\n  // Save todos to localStorage\n  const saveTodos = (updatedTodos: Todo[]) => {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('todos', JSON.stringify(updatedTodos));\n    }\n  };\n\n  // Function to add a new todo\n  const addTodo = () => {\n    if (!todoInput.trim()) return;\n\n    // Generate random position within viewport\n    const maxX = window.innerWidth - 250;\n    const maxY = window.innerHeight - 150;\n    const randomX = Math.max(100, Math.floor(Math.random() * maxX));\n    const randomY = Math.max(100, Math.floor(Math.random() * maxY));\n\n    // Create a new todo object\n    const todo = {\n      id: crypto.randomUUID(),\n      text: todoInput,\n      x: randomX,\n      y: randomY,\n      zIndex: 10,\n    };\n\n    // Update todos array and save to localStorage\n    const updatedTodos = [...todos, todo];\n    setTodos(updatedTodos);\n    saveTodos(updatedTodos);\n    setTodoInput('');\n  };\n\n  // Delete a todo\n  const deleteTodo = (id: string) => {\n    const updatedTodos = todos.filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n    saveTodos(updatedTodos);\n  };\n\n  // Start editing a todo\n  const startEditing = (id: string) => {\n    setEditingId(id);\n  };\n\n  // Update todo text\n  const updateTodo = (id: string, newText: string) => {\n    const updatedTodos = todos.map((todo) => \n      todo.id === id ? { ...todo, text: newText } : todo\n    );\n    setTodos(updatedTodos);\n    saveTodos(updatedTodos);\n  };\n\n  // Finish editing\n  const finishEditing = () => {\n    setEditingId(null);\n  };\n\n  // Dragging logic\n  const dragStart = (e: MouseEvent, todo: Todo) => {\n    // Don't start drag if we're editing\n    if (editingId === todo.id || (e.target as HTMLElement).closest('.edit-area')) {\n      return;\n    }\n\n    // Ignore if clicking buttons\n    if ((e.target as HTMLElement).tagName === 'BUTTON' || (e.target as HTMLElement).closest('button')) {\n      return;\n    }\n\n    // Set active element\n    setActiveElement(todo);\n\n    // Bring to front\n    const updatedTodos = todos.map((t) => ({\n      ...t,\n      zIndex: t.id === todo.id ? 100 : 10\n    }));\n    setTodos(updatedTodos);\n    saveTodos(updatedTodos);\n\n    setInitialX(e.clientX);\n    setInitialY(e.clientY);\n\n    // Find the DOM element\n    const element = document.getElementById(todo.id);\n    if (element) {\n      setOffsetX(element.offsetLeft);\n      setOffsetY(element.offsetTop);\n    }\n\n    document.addEventListener('mousemove', drag);\n    document.addEventListener('mouseup', dragEnd);\n  };\n\n  // Handle the drag move\n  const drag = (e: MouseEvent) => {\n    if (activeElement && initialX !== null && initialY !== null && offsetX !== null && offsetY !== null) {\n      e.preventDefault();\n\n      const currentX = e.clientX - initialX;\n      const currentY = e.clientY - initialY;\n\n      // Update the position in the todos array\n      const updatedTodos = todos.map((todo) => {\n        if (todo.id === activeElement.id) {\n          return {\n            ...todo,\n            x: offsetX + currentX,\n            y: offsetY + currentY\n          };\n        }\n        return todo;\n      });\n      \n      setTodos(updatedTodos);\n      saveTodos(updatedTodos);\n    }\n  };\n\n  const duplicate = (id: string) => {\n    const todo = todos.find((todo) => todo.id === id);\n    if (todo) {\n      const newTodo = {\n        id: crypto.randomUUID(),\n        text: todo.text,\n        x: todo.x + 10,\n        y: todo.y + 10,\n        zIndex: todo.zIndex + 1\n      };\n      const updatedTodos = [...todos, newTodo];\n      setTodos(updatedTodos);\n      saveTodos(updatedTodos);\n    }\n  };\n\n  // End dragging\n  const dragEnd = () => {\n    setActiveElement(null);\n    document.removeEventListener('mousemove', drag as any);\n    document.removeEventListener('mouseup', dragEnd);\n  };\n\n  // Handle keydown for add/edit functionality\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'Enter' && !event.shiftKey && !editingId) {\n      addTodo();\n    }\n\n    if (event.key === 'Escape' && editingId) {\n      finishEditing();\n    }\n  };\n\n  const handleModeChange = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown as any);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown as any);\n    };\n  }, [editingId, todoInput]);\n\n  return (\n    <div>\n      <nav>\n        <Button \n          variant=\"ghost\" \n          className=\"fixed right-4 top-4 text-yellow-500\" \n          onClick={handleModeChange}\n        >\n          {theme === 'dark' ? <Sun /> : <Moon />}\n        </Button>\n\n        <h1 className=\"mt-6 text-center text-4xl text-yellow-500\">StickyNotes</h1>\n\n        <Card className=\"fixed left-4 top-4 z-50 flex gap-2 rounded-lg p-3\">\n          <Input \n            type=\"text\" \n            value={todoInput} \n            onChange={(e) => setTodoInput(e.target.value)} \n            placeholder=\"Add a new item\" \n            className=\"w-72\" \n          />\n          <Button \n            variant=\"default\" \n            onClick={addTodo} \n            className=\"bg-yellow-500 hover:bg-primary/90\"\n          >\n            Add Item\n          </Button>\n        </Card>\n      </nav>\n\n      {todos.map((todo) => (\n        <div\n          key={todo.id}\n          id={todo.id}\n          className=\"todo-card absolute cursor-move\"\n          style={{\n            left: `${todo.x}px`, \n            top: `${todo.y}px`, \n            zIndex: todo.zIndex\n          }}\n          onMouseDown={(e) => dragStart(e as any, todo)}\n        >\n          <Card\n            className=\"min-h-[100px] min-w-[200px] max-w-[300px] overflow-auto rounded-3xl bg-card p-4 shadow-xl\"\n          >\n            <CardContent className=\"mt-2 p-2\">\n              {editingId === todo.id ? (\n                <div>\n                  <Textarea\n                    value={todo.text}\n                    onChange={(e) => updateTodo(todo.id, e.target.value)}\n                    className=\"mb-2 min-h-[80px] w-full resize-none whitespace-pre-wrap border-0 text-xl shadow-none\"\n                    autoFocus\n                    onBlur={finishEditing}\n                  />\n                  <Button variant=\"outline\" size=\"sm\" onClick={finishEditing} className=\"\">\n                    Done\n                  </Button>\n                </div>\n              ) : (\n                <p className=\"mb mt-1 whitespace-pre-wrap break-words text-xl text-card-foreground\">\n                  {todo.text}\n                </p>\n              )}\n            </CardContent>\n\n            <div className=\"todo-buttons absolute right-2 top-2 flex gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 rounded-full\"\n                onClick={() => duplicate(todo.id)}\n              >\n                <Copy className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 rounded-full\"\n                onClick={() => startEditing(todo.id)}\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-6 w-6 rounded-full\"\n                onClick={() => deleteTodo(todo.id)}\n              >\n                <Trash color=\"red\" className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </Card>\n        </div>\n      ))}\n\n      <style jsx>{`\n        .todo-buttons {\n          opacity: 0;\n          transition: opacity 0.2s ease-in-out;\n        }\n\n        .todo-card:hover .todo-buttons {\n          opacity: 1;\n        }\n\n        /* Ensure text wraps within cards */\n        .todo-card p {\n          overflow-wrap: break-word;\n          word-wrap: break-word;\n          hyphens: auto;\n          line-height: 1.5;\n        }\n      `}</style>\n    </div>\n  );\n}\n```\n\nFor this to work properly, you'll need to set up the theme provider in your layout. Create or modify your `app/layout.tsx` to include:\n\n```tsx\n// app/layout.tsx\nimport { ThemeProvider } from '@/components/theme-provider';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n```\n\nAnd create a theme provider component:\n\n```tsx\n// components/theme-provider.tsx\n\"use client\";\n\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\nimport { type ThemeProviderProps } from \"next-themes/dist/types\";\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n```\n\nDon't forget to install the `next-themes` package with:\n\n```bash\nnpm install next-themes\n```\n\nThis implementation follows the same functionality as your Svelte component, adapted for React and Next.js.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":40}}},{"id":{"replica_id":0,"value":19},"start":6917,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":41}}},{"id":{"replica_id":0,"value":20},"start":17420,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":42}}}],"summary":"StickyNotes Svelte to React Migration","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":6876},"icon":"File","label":"todos/src/routes/+page.svelte","metadata":{"path":"todos/src/routes/+page.svelte"}}]}