{"id":"275649a9-a1f0-44c7-9db1-b07fe17d4af6","zed":"context","version":"0.4.0","text":"\n\n\n\n  const offsetChartMin = Math.min.apply(data.map((d) => d.value));\n  const offsetChartMax = Math.max.apply(data.map((d) => d.value));\n\nwhy is the first Infinity and the second -Infinity?\n\nIn short, Math.min.apply and Math.max.apply both require two parameters: the first is the “this” context (which you can usually just pass as null), and the second is the actual array of arguments to be passed into Math.min/Math.max. In your snippet:\n\nconst offsetChartMin = Math.min.apply(data.map((d) => d.value)); \nconst offsetChartMax = Math.max.apply(data.map((d) => d.value));\n\nyou’re only calling apply with one parameter. This causes Math.min and Math.max to be called with undefined rather than your array of numbers, resulting in Infinity and -Infinity respectively.\n\nTo fix this, you can either use the correct .apply signature:\n\nconst offsetChartMin = Math.min.apply(null, data.map(d => d.value));\nconst offsetChartMax = Math.max.apply(null, data.map(d => d.value));\n\n…or use the ES6 spread syntax:\n\nconst offsetChartMin = Math.min(...data.map(d => d.value));\nconst offsetChartMax = Math.max(...data.map(d => d.value));\n\nBoth approaches ensure Math.min/Math.max receive your array of values as arguments correctly.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":59}}},{"id":{"replica_id":0,"value":29},"start":192,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":60}}},{"id":{"replica_id":0,"value":30},"start":1226,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":61}}}],"summary":"Why min and max return Infinity","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}